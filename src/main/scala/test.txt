type tt = | T1 of int * int | T2 of int * int * int ;;
def fn a = match a with 
  | T1(b, c) -> + b c
  | T2(b, c, d) -> + b (* c d) ;;


type intlist = | Node of int * intlist | Tail of int ;;
type inttree = | TNode of int * inttree * inttree | Leaf of int ;;

def sumlist a = match a with
  | Node(i, tail) -> + i (sumlist tail)
  | Tail(i) -> i ;;


def maplist il fn = match il with
  | Node(i, tail) -> Node((fn i), (maplist tail fn))
  | Tail(i) -> Tail((fn i)) ;;


def il = Node(1, Node(2, Node(3, Node(4, Tail(5))))) ;;
def it = TNode(1, TNode(2, Leaf(3), Leaf(4)), Leaf(7)) ;;

class Foo a 
  with bar : fun(a -> int)
  with bar2 : fun(a -> (int * int)) ;;

class Countable a
  with count : fun(a -> int) ;;

instance Countable intlist
  with count il = match il with
    | Node(i, tail) -> + 1 (count tail)
    | Tail(i) -> 1

instance Countable inttree
  with count it = match it with
    | TNode(v, n1, n2) -> + 1 (+ (count n1) (count n2))
    | Leaf(v) -> 1

instance Foo int
  with bar a = + a 2
  with bar2 a = (a, a) ;;

instance Foo (int * int)
  with bar (a, b) = + a b
  with bar2 (a, b) = (a, b) ;;

instance Foo tt
  with bar a = match a with 
    | T1(a, b) -> + a b 
    | T2(a,b,c) -> + a (+ b c)
  with bar2 a = match a with 
    | T1(a, b) -> (b, a) 
    | T2(a,b,c) -> (a, (+ b c)) ;;
  
type Expr = 
  | Val of int
  | Addition of Expr * Expr
  | Substraction of Expr * Expr ;;

class Evalable a
  with eval : fun(a -> int) ;;

instance Evalable Expr 
  with eval e = match e with 
    | Val(v) -> v
    | Addition(v1, v2) -> + (eval v1) (eval v2)
    | Substraction(v1, v2) -> - (eval v1) (eval v2) ;;
    
type Foo a = | Bar of a | Baz of a * a ;;

type Tree a = 
  | Node of a * (Tree a) * (Tree a) 
  | Leaf of a ;;

def fn f = match f with
  | Bar(a) -> a
  | Baz(a, b) -> + a b ;;
  
  
type tt a = | Node of (tt a) * (tt a) | Leaf of a ;;

def tree_accum tree tree_fn = match tree with
  | Node(n1, n2) -> tree_fn (tree_accum n1 tree_fn) (tree_accum n2 tree_fn)
  | Leaf(el) -> el ;;
  
type t1 a = | T1 of (t2 a) | T2 of a
and t2 a = | T3 of (t1 a) | T4 of a ;;

def g f = match f with | Node(n1, n2) -> + (g n1) (g n2) | Leaf(i) -> i ;;

Node(Leaf(12), Leaf(15)) ;;